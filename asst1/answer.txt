problem 1
q1 加速比1.9左右
q2 3条线程时速度慢于2条线程 因为view1中间的巨大白色圆盘全被给thread1了， thread0，2计算完都在等他
q3 没有线性增长，因为图像需要的计算量在不同区域是不同的，分配到的计算量并没有线性减少
q5 达到物理核心数之后就不会显著增长了，增多线程会引起上下文切换和超线程竞争资源等问题

problem 2
使用向量化进行加载修改等操作即可，代码没有难度
观察结果发现 VECTOR_WITH越大 Vector Utilization利用率会降低：因为VECTOR_WIDTH越大，等待"空转"的向量就更多，利用率就会降低
所以SIMD适合计算量一样，执行操作完全一样的指令运行，利用率才能最高